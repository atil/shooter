// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UniRx;


[DiagramInfoAttribute("Shooter")]
public abstract class GameViewBase : ViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(GameViewModel);
        }
    }
    
    public GameViewModel Game {
        get {
            return ((GameViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<GameController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
    }
}

[DiagramInfoAttribute("Shooter")]
public abstract class ShipViewBase : ViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(ShipViewModel);
        }
    }
    
    public ShipViewModel Ship {
        get {
            return ((ShipViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<ShipController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
    }
}

[DiagramInfoAttribute("Shooter")]
public abstract class PlayerShipViewBase : ShipViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(PlayerShipViewModel);
        }
    }
    
    public PlayerShipViewModel PlayerShip {
        get {
            return ((PlayerShipViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlayerShipController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("Shooter")]
public abstract class BulletViewBase : ViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(BulletViewModel);
        }
    }
    
    public BulletViewModel Bullet {
        get {
            return ((BulletViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<BulletController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
    }
}

public class GameViewViewBase : GameViewBase {
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<GameController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
}

public partial class GameView : GameViewViewBase {
}

public class ShipViewViewBase : ShipViewBase {
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<ShipController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
}

public partial class ShipView : ShipViewViewBase {
}

public class PlayerShipViewViewBase : ShipView {
    
    public PlayerShipViewModel PlayerShip {
        get {
            return ((PlayerShipViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(PlayerShipViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlayerShipController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class PlayerShipView : PlayerShipViewViewBase {
}

public class BulletViewViewBase : BulletViewBase {
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<BulletController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
}

public partial class BulletView : BulletViewViewBase {
}

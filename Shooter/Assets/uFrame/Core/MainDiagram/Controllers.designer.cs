// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Shooter {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.Kernel;
    using uFrame.IOC;
    using uFrame.MVVM;
    using uFrame.Serialization;
    using UniRx;
    
    
    public class GameControllerBase : uFrame.MVVM.Controller {
        
        private uFrame.MVVM.IViewModelManager _GameViewModelManager;
        
        [uFrame.IOC.InjectAttribute("Game")]
        public uFrame.MVVM.IViewModelManager GameViewModelManager {
            get {
                return _GameViewModelManager;
            }
            set {
                _GameViewModelManager = value;
            }
        }
        
        public IEnumerable<GameViewModel> GameViewModels {
            get {
                return GameViewModelManager.OfType<GameViewModel>();
            }
        }
        
        public override void Setup() {
            base.Setup();
            // This is called when the controller is created
        }
        
        public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
            base.Initialize(viewModel);
            // This is called when a viewmodel is created
            this.InitializeGame(((GameViewModel)(viewModel)));
        }
        
        public virtual GameViewModel CreateGame() {
            return ((GameViewModel)(this.Create(Guid.NewGuid().ToString())));
        }
        
        public override uFrame.MVVM.ViewModel CreateEmpty() {
            return new GameViewModel(this.EventAggregator);
        }
        
        public virtual void InitializeGame(GameViewModel viewModel) {
            // This is called when a GameViewModel is created
            GameViewModelManager.Add(viewModel);
        }
        
        public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
            base.DisposingViewModel(viewModel);
            GameViewModelManager.Remove(viewModel);
        }
    }
    
    public class ShipControllerBase : uFrame.MVVM.Controller {
        
        private uFrame.MVVM.IViewModelManager _ShipViewModelManager;
        
        [uFrame.IOC.InjectAttribute("Ship")]
        public uFrame.MVVM.IViewModelManager ShipViewModelManager {
            get {
                return _ShipViewModelManager;
            }
            set {
                _ShipViewModelManager = value;
            }
        }
        
        public IEnumerable<ShipViewModel> ShipViewModels {
            get {
                return ShipViewModelManager.OfType<ShipViewModel>();
            }
        }
        
        public override void Setup() {
            base.Setup();
            // This is called when the controller is created
        }
        
        public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
            base.Initialize(viewModel);
            // This is called when a viewmodel is created
            this.InitializeShip(((ShipViewModel)(viewModel)));
        }
        
        public virtual ShipViewModel CreateShip() {
            return ((ShipViewModel)(this.Create(Guid.NewGuid().ToString())));
        }
        
        public override uFrame.MVVM.ViewModel CreateEmpty() {
            return new ShipViewModel(this.EventAggregator);
        }
        
        public virtual void InitializeShip(ShipViewModel viewModel) {
            // This is called when a ShipViewModel is created
            ShipViewModelManager.Add(viewModel);
        }
        
        public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
            base.DisposingViewModel(viewModel);
            ShipViewModelManager.Remove(viewModel);
        }
    }
    
    public class PlayerShipControllerBase : ShipController {
        
        private uFrame.MVVM.IViewModelManager _PlayerShipViewModelManager;
        
        [uFrame.IOC.InjectAttribute("PlayerShip")]
        public uFrame.MVVM.IViewModelManager PlayerShipViewModelManager {
            get {
                return _PlayerShipViewModelManager;
            }
            set {
                _PlayerShipViewModelManager = value;
            }
        }
        
        public IEnumerable<PlayerShipViewModel> PlayerShipViewModels {
            get {
                return PlayerShipViewModelManager.OfType<PlayerShipViewModel>();
            }
        }
        
        public override void Setup() {
            base.Setup();
            // This is called when the controller is created
        }
        
        public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
            base.Initialize(viewModel);
            // This is called when a viewmodel is created
            this.InitializePlayerShip(((PlayerShipViewModel)(viewModel)));
        }
        
        public virtual PlayerShipViewModel CreatePlayerShip() {
            return ((PlayerShipViewModel)(this.Create(Guid.NewGuid().ToString())));
        }
        
        public override uFrame.MVVM.ViewModel CreateEmpty() {
            return new PlayerShipViewModel(this.EventAggregator);
        }
        
        public virtual void InitializePlayerShip(PlayerShipViewModel viewModel) {
            // This is called when a PlayerShipViewModel is created
            PlayerShipViewModelManager.Add(viewModel);
        }
        
        public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
            base.DisposingViewModel(viewModel);
            PlayerShipViewModelManager.Remove(viewModel);
        }
    }
    
    public class BulletControllerBase : uFrame.MVVM.Controller {
        
        private uFrame.MVVM.IViewModelManager _BulletViewModelManager;
        
        [uFrame.IOC.InjectAttribute("Bullet")]
        public uFrame.MVVM.IViewModelManager BulletViewModelManager {
            get {
                return _BulletViewModelManager;
            }
            set {
                _BulletViewModelManager = value;
            }
        }
        
        public IEnumerable<BulletViewModel> BulletViewModels {
            get {
                return BulletViewModelManager.OfType<BulletViewModel>();
            }
        }
        
        public override void Setup() {
            base.Setup();
            // This is called when the controller is created
        }
        
        public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
            base.Initialize(viewModel);
            // This is called when a viewmodel is created
            this.InitializeBullet(((BulletViewModel)(viewModel)));
        }
        
        public virtual BulletViewModel CreateBullet() {
            return ((BulletViewModel)(this.Create(Guid.NewGuid().ToString())));
        }
        
        public override uFrame.MVVM.ViewModel CreateEmpty() {
            return new BulletViewModel(this.EventAggregator);
        }
        
        public virtual void InitializeBullet(BulletViewModel viewModel) {
            // This is called when a BulletViewModel is created
            BulletViewModelManager.Add(viewModel);
        }
        
        public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
            base.DisposingViewModel(viewModel);
            BulletViewModelManager.Remove(viewModel);
        }
    }
}
